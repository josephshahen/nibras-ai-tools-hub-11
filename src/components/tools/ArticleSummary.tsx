import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { summarizeText } from '@/services/aiService';

const ArticleSummary = () => {
  const [articleText, setArticleText] = useState('');
  const [summary, setSummary] = useState('');
  const [summaryLength, setSummaryLength] = useState('medium');
  const [isLoading, setIsLoading] = useState(false);

  const handleSummarize = async () => {
    if (!articleText.trim()) return;

    setIsLoading(true);
    
    try {
      const result = await summarizeText(articleText, summaryLength);
      setSummary(result);
    } catch (error) {
      setSummary('ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ูู ุชูุฎูุต ุงููุต. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.');
    } finally {
      setIsLoading(false);
    }
  };

  const sampleArticles = [
    {
      title: "ููุงู ุชููู ุนู ุงูุฐูุงุก ุงูุงุตุทูุงุนู",
      content: "ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ูุฌุงู ูุชุทูุฑ ูู ุนููู ุงูุญุงุณูุจ ููุฏู ุฅูู ุฅูุดุงุก ุฃูุธูุฉ ูุงุฏุฑุฉ ุนูู ุฃุฏุงุก ููุงู ุชุชุทูุจ ุฐูุงุกู ุจุดุฑูุงู. ูุดูู ูุฐุง ุงููุฌุงู ุงูุนุฏูุฏ ูู ุงูุชูููุงุช ูุซู ุงูุชุนูู ุงูุขูู ูุงูุดุจูุงุช ุงูุนุตุจูุฉ ูุงููุนุงูุฌุฉ ุงูุทุจูุนูุฉ ููุบุฉ. ุชุทุจููุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู ููุฌูุฏุฉ ูู ูู ููุงู ุญูููุงุ ูู ูุญุฑูุงุช ุงูุจุญุซ ุฅูู ุงูุณูุงุฑุงุช ุฐุงุชูุฉ ุงูููุงุฏุฉ ูุงููุณุงุนุฏุงุช ุงูุตูุชูุฉ ุงูุฐููุฉ."
    },
    {
      title: "ููุงู ุนู ุชุทููุฑ ุงูููุจ",
      content: "ุชุทููุฑ ุงูููุจ ุงูุญุฏูุซ ูุดูู ุงูุนุฏูุฏ ูู ุงูุชูููุงุช ูุงูุฃุฏูุงุช ุงููุชูุฏูุฉ ูุซู React ูVue ูAngular ูุชุทููุฑ ูุงุฌูุงุช ุงููุณุชุฎุฏูุ ุจุงูุฅุถุงูุฉ ุฅูู Node.js ูPython ูุชุทููุฑ ุงูุฎุงุฏู. ุฃุตุจุญุช ููุงูุน ุงูููุจ ุงูููู ุฃูุซุฑ ุชูุงุนููุฉ ูุฏููุงููููุฉ ูู ุฃู ููุช ูุถูุ ูุน ุงุณุชุฎุฏุงู ุชูููุงุช ูุซู Progressive Web Apps ูSingle Page Applications."
    }
  ];

  return (
    <div className="min-h-screen py-20 px-4">
      <div className="container mx-auto max-w-6xl">
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-5xl font-bold font-cairo mb-4">
            <span className="text-gradient">ุชูุฎูุต</span> ุงูููุงูุงุช
          </h1>
          <p className="text-xl text-gray-300 font-cairo">
            ูุฎุต ุงูููุงูุงุช ุงูุทูููุฉ ูุงููุณุชูุฏุงุช ูู ุซูุงูู ูุนุฏูุฏุฉ
          </p>
        </div>

        <Card className="bg-black/40 backdrop-blur-sm border-white/10 mb-6">
          <CardHeader>
            <CardTitle className="text-center font-cairo text-white flex items-center justify-center gap-2">
              ๐ฐ ุฃุฏุงุฉ ุงูุชูุฎูุต ุงูุฐูู
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col md:flex-row gap-4 mb-6">
              <div className="flex-1">
                <label className="block text-sm font-cairo text-white mb-2">ุทูู ุงูููุฎุต</label>
                <Select value={summaryLength} onValueChange={setSummaryLength}>
                  <SelectTrigger className="bg-white/5 border-white/20 font-cairo">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent className="bg-black/90 border-white/20">
                    <SelectItem value="short" className="font-cairo">๐ ูุฎุชุตุฑ (2-3 ุฌูู)</SelectItem>
                    <SelectItem value="medium" className="font-cairo">๐ ูุชูุณุท (ููุฑุฉ ูุงุญุฏุฉ)</SelectItem>
                    <SelectItem value="long" className="font-cairo">๐ ููุตู (ุนุฏุฉ ููุฑุงุช)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-cairo text-white mb-2">ุงููุต ุฃู ุงูููุงู</label>
                <Textarea
                  value={articleText}
                  onChange={(e) => setArticleText(e.target.value)}
                  placeholder="ุงูุตู ุงูููุงู ุฃู ุงููุต ููุง..."
                  className="h-64 resize-none font-cairo bg-white/5 border-white/20"
                />
                <div className="flex justify-between items-center mt-2">
                  <span className="text-xs text-gray-400 font-cairo">
                    {articleText.length} ุญุฑู
                  </span>
                  <span className="text-xs text-gray-400 font-cairo">
                    ~{Math.floor(articleText.length / 5)} ูููุฉ
                  </span>
                </div>
              </div>

              <div>
                <label className="block text-sm font-cairo text-white mb-2">ุงูููุฎุต</label>
                <div className="h-64 p-3 bg-white/5 border border-white/20 rounded-md font-cairo text-white overflow-y-auto">
                  {isLoading ? (
                    <div className="flex flex-col items-center justify-center h-full text-center">
                      <div className="flex gap-1 mb-4">
                        <div className="w-3 h-3 bg-white rounded-full animate-bounce"></div>
                        <div className="w-3 h-3 bg-white rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                        <div className="w-3 h-3 bg-white rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                      </div>
                      <p className="text-sm text-gray-400">ุฌุงุฑู ุชุญููู ุงููุต ูุฅูุชุงุฌ ุงูููุฎุต...</p>
                    </div>
                  ) : (
                    summary || 'ุงูููุฎุต ุณูุธูุฑ ููุง ุจุนุฏ ุฅุฏุฎุงู ุงููุต ูุงูุถุบุท ุนูู "ูุฎุต ุงููุต"'
                  )}
                </div>
                {summary && (
                  <div className="text-xs text-gray-400 mt-2 font-cairo">
                    ูุณุจุฉ ุงูุถุบุท: {Math.round((1 - summary.length / articleText.length) * 100)}%
                  </div>
                )}
              </div>
            </div>

            <Button 
              onClick={handleSummarize}
              disabled={isLoading || !articleText.trim()}
              className="btn-gradient w-full mt-6"
            >
              {isLoading ? 'ุฌุงุฑู ุงูุชูุฎูุต...' : 'ูุฎุต ุงููุต'}
            </Button>
          </CardContent>
        </Card>

        <Card className="bg-black/40 backdrop-blur-sm border-white/10">
          <CardHeader>
            <CardTitle className="text-right font-cairo text-white">โก ุฃูุซูุฉ ุณุฑูุนุฉ</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {sampleArticles.map((article, index) => (
                <div key={index} className="p-4 bg-white/5 rounded-lg border border-white/10">
                  <h3 className="font-cairo font-semibold text-white mb-2">{article.title}</h3>
                  <p className="text-sm text-gray-400 font-cairo mb-3 line-clamp-2">
                    {article.content}
                  </p>
                  <Button
                    variant="outline"
                    size="sm"
                    className="w-full font-cairo border-white/20 hover:bg-white/10"
                    onClick={() => setArticleText(article.content)}
                  >
                    ุงุณุชุฎุฏู ูุฐุง ุงููุซุงู
                  </Button>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default ArticleSummary;
