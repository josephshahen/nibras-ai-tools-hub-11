import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Home } from 'lucide-react';
import { generateImageWithDeepAI } from '@/services/aiService';
import FloatingAIAssistant from '@/components/common/FloatingAIAssistant';

interface ImageGeneratorProps {
  onNavigate?: (section: string) => void;
}

const ImageGenerator = ({ onNavigate }: ImageGeneratorProps) => {
  const [prompt, setPrompt] = useState('');
  const [style, setStyle] = useState('realistic');
  const [generatedImages, setGeneratedImages] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [editMode, setEditMode] = useState(false);
  const [editPrompt, setEditPrompt] = useState('');

  const artStyles = [
    { value: 'realistic', label: '๐ธ ูุงูุนู ูุงุฆู ุงูุฌูุฏุฉ', description: 'ุตูุฑ ููุชูุบุฑุงููุฉ ุงุญุชุฑุงููุฉ ุนุงููุฉ ุงูุฏูุฉ' },
    { value: 'anime', label: '๐ธ ุฃููู ุงุญุชุฑุงูู', description: 'ุฃุณููุจ ุงูุฃููู ุงููุงุจุงูู ุงููุชุทูุฑ' },
    { value: 'cartoon', label: '๐จ ูุฑุชููู ุซูุงุซู ุงูุฃุจุนุงุฏ', description: 'ุฑุณูู ูุชุญุฑูุฉ ุงุญุชุฑุงููุฉ ุจุฌูุฏุฉ ุฏูุฒูู' },
    { value: 'digital-art', label: '๐ป ูู ุฑููู ูุชูุฏู', description: 'ุฃุนูุงู ูููุฉ ุฑูููุฉ ุงุญุชุฑุงููุฉ ููุจุฏุนุฉ' },
    { value: 'oil-painting', label: '๐ผ๏ธ ููุญุฉ ุฒูุชูุฉ ููุงุณูููุฉ', description: 'ูู ููุงุณููู ุจุฃุณููุจ ุงููุงุณุชุฑุฒ' },
    { value: 'watercolor', label: '๐ญ ุฃููุงู ูุงุฆูุฉ ูููุฉ', description: 'ูู ุงูุฃููุงู ุงููุงุฆูุฉ ุงูุฑุงูู' }
  ];

  const promptExamples = [
    "ูุทุฉ ุจูุถุงุก ุฌูููุฉ ุชุฌูุณ ูู ุญุฏููุฉ ูููุฆุฉ ุจุงููุฑูุฏ ุงูููููุฉุ ุฅุถุงุกุฉ ุฐูุจูุฉุ ุฌูุฏุฉ ุนุงููุฉุ 8K",
    "ููุธุฑ ุทุจูุนู ุฎูุงุจ ูุฌุจุงู ูุบุทุงุฉ ุจุงูุซููุฌ ุนูุฏ ุบุฑูุจ ุงูุดูุณุ ุฃููุงู ุฏุงูุฆุฉุ ุชูุงุตูู ูุฐููุฉ",
    "ุฑุงุฆุฏ ูุถุงุก ูุณุชูุดู ูููุจุงู ุบุฑูุจุงู ูููุฆุงู ุจุงููุจุงุชุงุช ุงููุถุงุฆูุฉ ุงููุถูุฆุฉุ ุฎูุงู ุนููู ูุชุทูุฑ",
    "ููุนุฉ ูู ุงููุฑูู ุงููุณุทู ุนูู ููุฉ ุฌุจู ูู ุถูุก ุงูููุฑุ ุฃุฌูุงุก ุบุงูุถุฉ ูุฑููุงูุณูุฉ"
  ];

  const enhancePrompt = (originalPrompt: string) => {
    const enhancementWords = [
      "ุนุงูู ุงูุฌูุฏุฉ", "8K resolution", "masterpiece", "detailed", "professional",
      "beautiful lighting", "perfect composition", "award winning"
    ];
    
    return `${originalPrompt}, ${enhancementWords.join(', ')}`;
  };

  const generateImage = async () => {
    if (!prompt.trim()) return;

    setIsLoading(true);
    setGeneratedImages([]);
    
    try {
      console.log('๐จ ุจุฏุก ุชูููุฏ ุงูุตูุฑุฉ ุจู DeepAI...');
      
      const enhancedPrompt = enhancePrompt(prompt);
      const imageUrl = await generateImageWithDeepAI(enhancedPrompt, style);

      setGeneratedImages([imageUrl]);
      setCurrentImageIndex(0);
      console.log('โ ุชู ุชูููุฏ ุงูุตูุฑุฉ ุจูุฌุงุญ');
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุชูููุฏ ุงูุตูุฑุฉ:', error);
      const fallbackImage = 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=512&h=512&fit=crop';
      setGeneratedImages([fallbackImage]);
      setCurrentImageIndex(0);
    } finally {
      setIsLoading(false);
    }
  };

  const editCurrentImage = async () => {
    if (!editPrompt.trim() || generatedImages.length === 0) return;

    setIsLoading(true);
    
    try {
      console.log('โ๏ธ ุจุฏุก ุชุนุฏูู ุงูุตูุฑุฉ...');
      
      const combinedPrompt = `${prompt}, ${editPrompt}`;
      const enhancedPrompt = enhancePrompt(combinedPrompt);
      const editedImageUrl = await generateImageWithDeepAI(enhancedPrompt, style);

      const updatedImages = [...generatedImages];
      updatedImages[currentImageIndex] = editedImageUrl;
      setGeneratedImages(updatedImages);
      
      setEditMode(false);
      setEditPrompt('');
      console.log('โ ุชู ุชุนุฏูู ุงูุตูุฑุฉ ุจูุฌุงุญ');
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุชุนุฏูู ุงูุตูุฑุฉ:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const downloadCurrentImage = async () => {
    if (!generatedImages[currentImageIndex]) return;
    
    try {
      const response = await fetch(generatedImages[currentImageIndex]);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `generated-image-${Date.now()}.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('ุฎุทุฃ ูู ุชุญููู ุงูุตูุฑุฉ:', error);
    }
  };

  const handleAIApply = (suggestion: string) => {
    // ุชุทุจูู ุงูุชุฑุงุญุงุช ุงููุณุงุนุฏ ุงูุฐูู
    if (suggestion.includes('ุชุนุฏูู') || suggestion.includes('ุนุฏู')) {
      setEditPrompt(suggestion);
      setEditMode(true);
    } else {
      setPrompt(suggestion);
    }
  };

  const getCurrentContext = () => {
    return `ูููุฏ ุงูุตูุฑ - ุงููุตู ุงูุญุงูู: ${prompt} - ุงูููุท: ${style} - ${generatedImages.length > 0 ? 'ุชู ุฅูุดุงุก ุตูุฑุฉ' : 'ูู ูุชู ุฅูุดุงุก ุตูุฑุฉ ุจุนุฏ'}`;
  };

  return (
    <div className="min-h-screen py-20 px-4">
      <div className="container mx-auto max-w-6xl">
        <div className="text-center mb-8">
          <div className="flex justify-between items-center mb-4">
            <Button
              onClick={() => onNavigate?.('home')}
              variant="outline"
              className="border-white/20 hover:bg-white/10 flex items-center gap-2"
            >
              <Home size={16} />
              ุงูุนูุฏุฉ ููุฑุฆูุณูุฉ
            </Button>
          </div>
          <h1 className="text-4xl md:text-5xl font-bold font-cairo mb-4">
            <span className="text-gradient">ูููุฏ ุงูุตูุฑ</span> ุงููุชุทูุฑ
          </h1>
          <p className="text-xl text-gray-300 font-cairo">
            ุฃูุดุฆ ูุนุฏูู ุตูุฑุงู ูุฐููุฉ ุจุชูููุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู - ุจุฏุนู DeepAI
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Card className="bg-black/40 backdrop-blur-sm border-white/10">
            <CardHeader>
              <CardTitle className="text-right font-cairo text-white flex items-center justify-end gap-2">
                ๐จ ุฅุนุฏุงุฏุงุช ุงูุตูุฑุฉ
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {!editMode ? (
                <>
                  <div>
                    <label className="block text-sm font-cairo text-white mb-2">ูุตู ุงูุตูุฑุฉ</label>
                    <Textarea
                      value={prompt}
                      onChange={(e) => setPrompt(e.target.value)}
                      placeholder="ุตู ุงูุตูุฑุฉ ุงูุชู ุชุฑูุฏูุง ุจุงูุชูุตูู..."
                      className="h-32 resize-none font-cairo bg-white/5 border-white/20 text-right"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-cairo text-white mb-2">ููุท ุงููู</label>
                    <Select value={style} onValueChange={setStyle}>
                      <SelectTrigger className="bg-white/5 border-white/20 font-cairo">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="bg-black/90 border-white/20">
                        {artStyles.map((styleOption) => (
                          <SelectItem key={styleOption.value} value={styleOption.value} className="font-cairo">
                            <div className="text-right">
                              <div className="font-semibold">{styleOption.label}</div>
                              <div className="text-xs text-gray-400">{styleOption.description}</div>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <Button 
                    onClick={generateImage}
                    disabled={isLoading || !prompt.trim()}
                    className="btn-gradient w-full py-3"
                  >
                    {isLoading ? '๐จ ุฌุงุฑู ุงูุฅูุดุงุก...' : 'โจ ุฃูุดุฆ ุงูุตูุฑุฉ'}
                  </Button>
                </>
              ) : (
                <>
                  <div>
                    <label className="block text-sm font-cairo text-white mb-2">ุชุนุฏููุงุช ุนูู ุงูุตูุฑุฉ</label>
                    <Textarea
                      value={editPrompt}
                      onChange={(e) => setEditPrompt(e.target.value)}
                      placeholder="ุงูุชุจ ุงูุชุนุฏููุงุช ุงููุทููุจุฉ: ุฃุถูุ ุบููุฑุ ุงุญุฐู..."
                      className="h-32 resize-none font-cairo bg-white/5 border-white/20 text-right"
                    />
                    <div className="text-xs text-gray-400 mt-2 font-cairo">
                      ูุซุงู: "ุฃุถู ูุทุฉ ุตุบูุฑุฉ"ุ "ุบููุฑ ุงูููู ุฅูู ุฃุฒุฑู"ุ "ุงุญุฐู ุงูุฎูููุฉ"
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-2">
                    <Button 
                      onClick={editCurrentImage}
                      disabled={isLoading || !editPrompt.trim()}
                      className="btn-gradient"
                    >
                      {isLoading ? 'โ๏ธ ุฌุงุฑู ุงูุชุนุฏูู...' : 'โ ุทุจู ุงูุชุนุฏูู'}
                    </Button>
                    <Button 
                      onClick={() => {setEditMode(false); setEditPrompt('');}}
                      variant="outline"
                      className="border-white/20 hover:bg-white/10"
                    >
                      ุฅูุบุงุก
                    </Button>
                  </div>
                </>
              )}

              {generatedImages.length > 0 && !editMode && (
                <div className="grid grid-cols-2 gap-2">
                  <Button 
                    onClick={() => setEditMode(true)}
                    variant="outline"
                    className="border-white/20 hover:bg-white/10"
                  >
                    โ๏ธ ุนุฏูู ุงูุตูุฑุฉ
                  </Button>
                  <Button 
                    onClick={downloadCurrentImage}
                    variant="outline"
                    className="border-white/20 hover:bg-white/10"
                  >
                    ๐ฅ ุญููู
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>

          <Card className="bg-black/40 backdrop-blur-sm border-white/10">
            <CardHeader>
              <CardTitle className="text-right font-cairo text-white">
                ๐ผ๏ธ ุงูุตูุฑุฉ ุงููููุฏุฉ
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="aspect-square bg-black/50 rounded-lg flex items-center justify-center overflow-hidden border border-white/10">
                {isLoading ? (
                  <div className="text-center">
                    <div className="relative w-20 h-20 mx-auto mb-6">
                      <div className="absolute inset-0 border-4 border-white/20 rounded-full"></div>
                      <div className="absolute inset-0 border-4 border-t-white border-r-blue-400 border-b-purple-400 border-l-pink-400 rounded-full animate-spin"></div>
                    </div>
                    <p className="text-sm text-gray-400 font-cairo mb-2">
                      {editMode ? 'โ๏ธ ุฌุงุฑู ุชุนุฏูู ุงูุตูุฑุฉ...' : '๐จ ุฌุงุฑู ุฅูุดุงุก ุงูุตูุฑุฉ...'}
                    </p>
                    <p className="text-xs text-gray-500 font-cairo">ูุฏ ูุณุชุบุฑู 15-30 ุซุงููุฉ</p>
                  </div>
                ) : generatedImages.length > 0 ? (
                  <img 
                    src={generatedImages[currentImageIndex]} 
                    alt="Generated"
                    className="w-full h-full object-cover rounded-lg"
                  />
                ) : (
                  <div className="text-center">
                    <div className="text-6xl mb-4">๐จ</div>
                    <p className="text-gray-400 font-cairo">ุงูุตูุฑุฉ ุณุชุธูุฑ ููุง</p>
                  </div>
                )}
              </div>
              
              {generatedImages.length > 0 && (
                <div className="mt-4 p-3 bg-white/5 rounded-lg">
                  <div className="text-xs text-gray-400 font-cairo space-y-1">
                    <div><strong>ุงููุตู:</strong> {prompt}</div>
                    <div><strong>ุงูููุท:</strong> {artStyles.find(s => s.value === style)?.label}</div>
                    <div><strong>ุงููููุฏ:</strong> DeepAI API</div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        <Card className="bg-black/40 backdrop-blur-sm border-white/10 mt-6">
          <CardHeader>
            <CardTitle className="text-right font-cairo text-white">โก ุฃูุซูุฉ ููุฅููุงู</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {promptExamples.map((example, index) => (
                <Button
                  key={index}
                  variant="outline"
                  className="text-right font-cairo border-white/20 hover:bg-white/10 h-auto py-3 text-wrap"
                  onClick={() => setPrompt(example)}
                >
                  {example}
                </Button>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>

      <FloatingAIAssistant 
        context={getCurrentContext()}
        onApply={handleAIApply}
      />
    </div>
  );
};

export default ImageGenerator;
