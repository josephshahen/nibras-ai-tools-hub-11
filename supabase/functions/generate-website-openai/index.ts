
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { title, description, type, color, editRequest } = await req.json();
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

    if (!openAIApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    console.log('๐ ุชูููุฏ ูููุน ุจู GPT-4:', title);

    let systemPrompt = `ุฃูุช ูุทูุฑ ููุงูุน ุฎุจูุฑ ูุชุฎุตุต ูู ุฅูุดุงุก ููุงูุน ููุจ ูุงููุฉ ูุฌุงูุฒุฉ ููุงุณุชุฎุฏุงู.

ุฃูุดุฆ ูููุน ููุจ ูุงูู ุจู HTMLุ CSSุ JavaScript ูุชุถูู:

1. HTML ูุงูู ูุน ุฌููุน ุงูุนูุงุตุฑ ุงููุทููุจุฉ
2. CSS ูุฏูุฌ ูู ุงูู head ูุน ุชุตููู ุนุตุฑู ูุฌุฐุงุจ
3. JavaScript ุชูุงุนูู ูุฏูุฌ ูู ุงูุตูุญุฉ
4. ุชุตููู ูุชุฌุงูุจ ูุน ุฌููุน ุงูุฃุฌูุฒุฉ (Mobile-First)
5. ุฃููุงู ูุชูุงุณูุฉ ุจุงุณุชุฎุฏุงู ุงูููู ุงูุฃุณุงุณู ุงููุทููุจ
6. ุฃููููุงุช ูุนูุงุตุฑ ุจุตุฑูุฉ (ุงุณุชุฎุฏู Font Awesome)
7. ุชุฃุซูุฑุงุช CSS ูุชูุฏูุฉ (animations, transitions, gradients)
8. ูุญุชูู ูุงูุนู ูููุงุณุจ ูููุน ุงููููุน
9. ุฏุนู ุงููุบุฉ ุงูุนุฑุจูุฉ ูุน direction: rtl
10. SEO-friendly ูุน meta tags

ููุน ุงููููุน: ${type}
ุงูููู ุงูุฃุณุงุณู: ${color}

ุงููุชุทูุจุงุช ุงูุฅุถุงููุฉ ุญุณุจ ููุน ุงููููุน:
- ุฅุฐุง ูุงู ูููุน ุดุฑูุฉ: ุฃุถู headerุ hero sectionุ ุฎุฏูุงุชุ ูุฑูู ุงูุนููุ footer
- ุฅุฐุง ูุงู ูุนุฑุถ ุฃุนูุงู: ุฃุถู gallery ููุฃุนูุงูุ ูุณู ุงูููุงุฑุงุชุ ูุนูููุงุช ุดุฎุตูุฉ
- ุฅุฐุง ูุงู ูุฏููุฉ: ุฃุถู ูุงุฆูุฉ ููุงูุงุชุ sidebarุ ูุธุงู ุชุนูููุงุช
- ุฅุฐุง ูุงู ุตูุญุฉ ูุจูุท: ุฃุถู ุนุฑุถ ูููุ ูููุฒุงุชุ testimonialsุ call-to-action
- ุฅุฐุง ูุงู ูุทุนู: ุฃุถู ูุงุฆูุฉ ุงูุทุนุงูุ ูุนุฑุถ ุตูุฑุ ูุนูููุงุช ุงูุชูุงุตู
- ุฅุฐุง ูุงู ูุชุฌุฑ: ุฃุถู ุนุฑุถ ููุชุฌุงุชุ ุณูุฉ ุชุณููุ ูุธุงู ุฏูุน

ุฃูุดุฆ ุงูููุฏ ุงููุงูู ูููููุน ููุท ุจุฏูู ุฃู ุดุฑุญ ุฃู ุชุนูููุงุช ุฎุงุฑุฌูุฉ.`;

    let userPrompt = `ุงุณู ุงููููุน: ${title}
ูุตู ุงููููุน: ${description}

${editRequest ? `ุชุนุฏูู ูุทููุจ: ${editRequest}` : ''}

ุฃูุดุฆ ูููุน ููุจ ูุงูู ูุฌุงูุฒ ููุงุณุชุฎุฏุงู ูุน ุฌููุน ุงููุชุทูุจุงุช ุงููุฐููุฑุฉ.`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 4000,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      const error = await response.json();
      console.error('OpenAI API error:', error);
      throw new Error(`OpenAI API error: ${error.error?.message || 'Unknown error'}`);
    }

    const data = await response.json();
    let websiteCode = data.choices[0].message.content;

    // ุชูุธูู ุงูููุฏ ูู markdown formatting ุฅุฐุง ููุฌุฏ
    websiteCode = websiteCode.replace(/```html\n?/g, '').replace(/```\n?/g, '').trim();

    // ุงูุชุฃูุฏ ูู ูุฌูุฏ DOCTYPE ุฅุฐุง ูู ููู ููุฌูุฏ
    if (!websiteCode.includes('<!DOCTYPE html>')) {
      websiteCode = `<!DOCTYPE html>\n${websiteCode}`;
    }

    console.log('โ ุชู ุชูููุฏ ุงููููุน ุจูุฌุงุญ');

    return new Response(JSON.stringify({ websiteCode }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุชูููุฏ ุงููููุน:', error);
    return new Response(JSON.stringify({ 
      error: 'ูุดู ูู ุชูููุฏ ุงููููุน', 
      details: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
